#Book application:
1.Open an SSH client.
2.Locate your private key file. The key used to launch this instance is uno-ceo.pem
3.Run this command, if necessary, to ensure your key is not publicly viewable.
 chmod 400 uno-ceo.pem
4.Connect to your instance using its Public DNS:
 ec2-54-144-224-76.compute-1.amazonaws.com
Example:
 ssh -i uno-ceo.pem ec2-user@ec2-54-144-224-76.compute-1.amazonaws.com
 
Docker Commands Cheat Sheet
Here is a list of general Docker commands used in this video course: 

http://appsdeveloperblog.com/docker-commands-cheat-sheet/
=================================================================
#LIST DOCKER VOLUMES
docker volume ls

=================================================================

Docker hub access token:

docker login -u santosr09

c3953a57-f2e6-4016-b8ed-579a8f146cda


=================================================================
#DELETE A REMOTE BRANCH
git push origin :<NAME-OF-DELETED-LOCAL-BRANCH>

=================================================================

GET THE TERMINAL OF THE DOCKER CONTAINER:
docker exec -it <CONTAINER-ID> /bin/bash
or with sh
docker exec -it <CONTAINER-ID> /bin/sh
wirh a named container
docker exec -it <CONTAINER-NAME> /bin/sh

=================================================================

mysql -h localhost -P 3306 -u testuser -ploma1234

mysql -h localhost -u testuser -ploma1234 test_books

=================================================================


=================================================================


=================================================================


=================================================================


=================================================================

#SOLUTION TO ERROR:  Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: 
sudo chmod 666 /var/run/docker.sock

=================================================================

#copy a file from local to EC2 instance
scp -i ./uno-ceo.pem ./docker-compose.yaml ec2-user@ec2-44-195-232-229.compute-1.amazonaws.com:/home/ec2-user/


ssh -i "uno-ceo.pem" ec2-user@ec2-18-212-182-240.compute-1.amazonaws.com

scp -i ./uno-ceo.pem ./docker-compose.yaml ec2-user@ec2-18-212-182-240.compute-1.amazonaws.com:/home/ec2-user/

ssh -i "uno-ceo.pem" ec2-user@ec2-18-212-182-240.compute-1.amazonaws.com

=================================================================
ACTIVATING PROFILE
MAVEN
mvn spring-boot:run -Dspring-boot.run.arguments=--spring.profiles.active=production

Docker
docker run -d -e "spring.profiles.active=production" santosr09/user-service

=================================================

ELK

#ZIPKIN
java -jar zipkin-server-2.23.16-exec.jar

Dashboard:
http://localhost:9411

#ELASTICSEARCH
bin\elasticsearch.bat

Dashboard:
http://localhost:9200

#KIBANA
bin\kibana.bat

Dashboard:
http://localhost:5601

#LOGSTASH
bin\logstash -f simple-config.config


=================================================================

ERROR:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions for 'uno-ceo.pem' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key "uno-ceo.pem": bad permissions


SOLVED:
In PowerShell execute these commands:

$path = ".\uno-ceo.pem"
# Reset to remove explicit permissions
icacls.exe $path /reset
# Give current user explicit read-permission
icacls.exe $path /GRANT:R "$($env:USERNAME):(R)"
# Disable inheritance and remove inherited permissions
icacls.exe $path /inheritance:r


=================================================================

=================================================
Install Docker on AWS EC2

sudo yum install docker 
sudo service docker start
sudo usermod -a -G docker ec2-user

Run RabbitMQ Docker Container
docker run -d --name rabbit-name-management -p 15672:15672 -p 5672:5672 -p 5671:5671 rabbitmq:3-management

To run RabbitMQ and change Default user name and password:

docker run -d --name rabbit-name-management -p 15672:15672 -p 5672:5672 -p 5671:5671 -e RABBITMQ_DEFAULT_USER=user –e RABBITMQ_DEFAULT_PASS=password rabbitmq:3-management



Run Config Servere Docker Container
docker run -d -p 8012:8012 -e "spring.rabbitmq.host=172.17.0.2" kargopolov/config-server



Run Eureka Docker Container
docker run -d -p 8010:8010 -e "spring.cloud.config.uri=http://172.31.0.133:8012" kargopolov/sk-eureka-server



Run Zuul API Gateway Docker Container
docker run -d -e "spring.cloud.config.uri=http://99.79.172.54:8012" -e "spring.rabbitmq.host=99.79.172.54" -p 8011:8011 kargopolov/sk-zuul-api-gateway



Run Elasticsearch Docker Container
docker run -d --name elasticsearch --network api_network -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.3.0



Run Kibana Docker Container
docker run -d --network api-network -p 5601:5601 kibana:7.3.0



Run Albums Microservice Docker Container
docker run -it -d -e "eureka.client.serviceUrl.defaultZone=http://test:test@99.79.99.76:8010/eureka" --network host -e "logging.file=/api-logs/albums-ws.log" -v /home/ec2-user/api-logs:/api-logs kargopolov/albums-microservice



Run Logstash for Albums Microservice Docker Container
docker run -d --name logstash /home/ec2-user/api-logs:/api-logs kargopolov/sk-albums-microservice-logstash



Run MySQL Docker Container
docker run –d -p 3306:3306 --name mysql-docker-container -e MYSQL_ROOT_PASSWORD=sergey -e MYSQL_DATABASE=photo_app -e MYSQL_USER=sergey -e MYSQL_PASSWORD=sergey mysql:latest



Run Users Microservice Docker Container
docker run -d -e "spring.cloud.config.uri=http://172.31.4.43:8012" -e "spring.rabbitmq.host=172.31.4.43" -e "eureka.client.serviceUrl.defaultZone=http://test:test@172.31.18.99:8010/eureka" -e "spring.datasource.url=jdbc:mysql://172.31.13.167:3306/photo_app?serverTimezone=UTC" --network host -e "logging.file=/api-logs/users-ws.log" -v /home/ec2-user/api-logs:/api-logs kargopolov/sk-users-microservice



Run Logstash for Users Microservice
docker run -d --name users-ws-logstash /home/ec2-user/home:/api-logs kargopolov/sk-users-ws-logstash